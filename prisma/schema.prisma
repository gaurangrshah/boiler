// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    password      String?
    image         String?
    accounts      Account[]
    sessions      Session[]
    preferences   Preference[]
    appDetail     AppDetail[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Preference {
    id          String        @id @default(cuid())
    user        User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String?       @unique
    colorScheme ColorScheme[]

    @@map("preferences")
}

model ColorScheme {
    id            String      @unique @default(cuid())
    primary       String
    primaryDark   String
    secondary     String
    secondaryDark String
    bg            String
    bgDark        String
    accent        String
    accentDark    String
    gray          String
    grayDark      String
    preferences   Preference? @relation(fields: [preferenceId], references: [id], onDelete: Cascade)
    preferenceId  String?

    @@map("colorScheme")
}

model AppDetail {
    id      String  @unique @default(cuid())
    name    String  @default("appsolute")
    useCase String  @default("developers")
    domain  String  @default("http://localhost:")
    port    Int     @default(3000)
    private Boolean @default(true)
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String  @unique

    @@map("appDetails")
}
